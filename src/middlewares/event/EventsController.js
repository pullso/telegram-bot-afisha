import {Markup} from "telegraf";
import {calendar, menuKeyboard} from "../../bot.js";
import EventsService from "./EventsService.js";
import UserService from "../../services/UserService.js";
import moment from "../../plugins/moment.js";

class EventsController {
  async enter(ctx) {
    const {message_id} = await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∏—Å–∫–∞:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ñ´Ô∏è–°–µ–≥–æ–¥–Ω—è', 'date –°–µ–≥–æ–¥–Ω—è'),
          Markup.button.callback('‚ñ´Ô∏è–ó–∞–≤—Ç—Ä–∞', 'date –ó–∞–≤—Ç—Ä–∞')],
        [Markup.button.callback('‚ñ™Ô∏è–°–µ–≥–æ–¥–Ω—è (–≤–µ—á–µ—Ä)', 'date –°–µ–≥–æ–¥–Ω—è (17:00 - 00:00)', moment().hour() >= 17),
          Markup.button.callback('‚ñ™Ô∏è–ó–∞–≤—Ç—Ä–∞ (–≤–µ—á–µ—Ä)', 'date –ó–∞–≤—Ç—Ä–∞ (17:00 - 00:00)')],
        [Markup.button.callback('‚ñ´—Å–±', 'date –°—É–±–±–æ—Ç–∞'),
          Markup.button.callback('‚ñ´–≤—Å', 'date –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'),
          // Markup.button.callback('‚ñ´Ô∏è–í—ã—Ö–æ–¥–Ω—ã–µ', 'date –í—ã—Ö–æ–¥–Ω—ã–µ')
        ],
        [Markup.button.callback('‚ñ´–ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'calendar'),
          Markup.button.callback('üìã –ú–µ–Ω—é', 'menu')]]).resize())


    ctx.session[ctx.from.id].page.pageIndex = 1;
    ctx.session[ctx.from.id].deleteMessageIds.push({message_id, chat_id: ctx.chat.id})
  }

  async moreEvents(ctx) {
    if (ctx.session[ctx.from.id].events?.length === 0) {
      await ctx.reply('–ë–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç\nüìã –ú–µ–Ω—é', menuKeyboard)
    } else {
      const data = await EventsService.getEventsResponse(ctx)
      await sendEventResponse(ctx, data);
    }
  }

  async sendEvents(ctx) {
    ctx.session[ctx.from.id].events = []
    const events = await EventsService.getEvents(ctx)

    if (events?.values?.length) {
      ctx.session[ctx.from.id].events = EventsService.prepareEvents(events)
      const eventsData = await EventsService.getEventsResponse(ctx)
      await sendEventResponse(ctx, eventsData);
      await ctx.wizard.next()
    } else {
      ctx.session[ctx.from.id].settings = {}
      await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...', menuKeyboard)
      await ctx.scene.leave()
    }
  }

  async getDate(ctx) {
    const session = ctx.session[ctx.from.id]
    session.settings.date = ctx.match[1]

    const user = await UserService.find(ctx.from.id)

    const opt = {
      ...session.settings,
      ...user.options,
    }

    const {price_max, price_min} = opt
    const priceText = (price_max === price_min && price_min === 0)
      ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
      : `–æ—Ç ${price_min} –¥–æ ${price_max}`

    await ctx.editMessageText(`üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\nüìç ${opt.cities}\nüí∏ ${priceText} \n‚è± ${opt.date}`)
    await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, `${ctx.from.id}\nüîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\nüìç ${opt.cities}\nüí∏ ${priceText} \n‚è± ${opt.date}`)

    return ctx.wizard.steps[ctx.wizard.cursor + 1](ctx)
  }
}


async function sendEventResponse(ctx, {response = null, isLastPage = false}) {
  if (!response || !response.length) {
    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏...', menuKeyboard)
    return
  }

  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('–ï—â—ë', 'moreEvents', isLastPage),
    Markup.button.callback('üìã –ú–µ–Ω—é', 'menu')
  ])
  await ctx.replyWithHTML(
    response.join('\n\n'),
    {
      disable_web_page_preview: true,
      parse_mode: "HTML",
      reply_markup: keyboard.reply_markup
    },
  )
}

export default new EventsController()
